<launch>

  <arg name="gui" default="true" />
  <arg name="device" default="-1" />
  <arg name="input_image" default="/camera/left_vzense_camera/color/image_raw" />
  <arg name="input_depth_image" default="/camera/left_vzense_camera/transformedDepth/image_raw" />
  <arg name="input_cloud" default="/camera/left_vzense_camera/transformedDepth/points" />
  <arg name="model_file" default="2024-10-02-grape_ncnn_model" />
  <arg name="manager" default="/camera/left_vzense_camera/vzense_manager" />

  <!-- morphology operation on mask to handle transparent bottle and other noisy pixels -->
  <node name="morphology_close" pkg="opencv_apps" type="morphology" >
    <remap from="image" to="$(arg input_depth_image)/mask" />
    <remap from="~image" to="$(arg input_depth_image)/mask/close_operation" />
    <param name="use_camera_info" value="false" />
    <param name="debug_view" value="false" />
    <param name="queue_size" value="10" />
    <param name="morph_operator" value="1" />
    <param name="morph_element" value="0" />
    <param name="morph_size" value="40" />
  </node>
  <node name="morphology_open" pkg="opencv_apps" type="morphology" >
    <remap from="image" to="$(arg input_depth_image)/mask/close_operation" />
    <remap from="~image" to="$(arg input_depth_image)/mask/open_operation" />
    <param name="use_camera_info" value="false" />
    <param name="debug_view" value="false" />
    <param name="queue_size" value="10" />
    <param name="morph_operator" value="0" />
    <param name="morph_element" value="0" />
    <param name="morph_size" value="40" />
  </node>

  <!-- use filtered mask to extract foreground rgb image -->
  <node name="apply_mask_image"
        pkg="nodelet" type="nodelet"
        args="load jsk_perception/ApplyMaskImage $(arg manager)">
    <remap from="~input" to="$(arg input_image)" />
    <remap from="~input/mask" to="$(arg input_depth_image)/mask/open_operation" />
    <remap from="~output" to="$(arg input_image)/depth_filtered" />
    <remap from="~output/mask" to="$(arg input_image)/depth_filtered/mask" />
    <rosparam>
      approximate_sync: true
      clip: false
      cval: 0
    </rosparam>
  </node>

  <node name="object_detection"
        pkg="vzense_demo" type="object_detection.py"
        output="screen"
        clear_params="true"
        required="false">
    <remap from="~input" to="$(arg input_image)/depth_filtered" />
    <rosparam subst_value="true">
      model_path: $(find vzense_demo)/trained_data/yolo8/$(arg model_file)
      score_thresh: 0.7
      nms_thresh: 0.45
      device: $(arg device)
    </rosparam>
  </node>

  <node name="label_image_decomposer_instance"
        pkg="vzense_demo" type="label_image_decomposer.py"
        output="screen" clear_params="true" >
    <remap from="~input" to="$(arg input_image)" />
    <remap from="~input/label" to="object_detection/output/label_ins" />
    <remap from="~output/label_viz" to="~output/viz" />
    <rosparam subst_value="true" >
      approximate_sync: false
      use_label_array: false
      only_label: false
      queue_size: 100
      alpha: 0.5
    </rosparam>
  </node>

  <node name="draw_rects"
        pkg="vzense_demo" type="draw_rects.py"
        output="screen"
        clear_params="true" >
    <remap from="~input" to="label_image_decomposer_instance/output/viz" />
    <remap from="~input/rects" to="object_detection/output/rects" />
    <remap from="~input/class" to="object_detection/output/class" />
    <remap from="~output" to="/yolo8" />
    <rosparam subst_value="true">
      font_path: $(find vzense_demo)/font_data/NotoSansJP-Regular.otf
      use_classification_result: true
      label_size: 32
      show_proba: true
      queue_size: 100
    </rosparam>
  </node>

  <node name="tile_image_2x1"
        pkg="vzense_demo" type="tile_image.py"
        output="screen">
    <remap from="~output" to="~output" />
    <rosparam subst_value="true">
      input_topics: [$(arg input_image), /yolo8]
      shape: [1, 2]
      no_sync: true
      draw_topic_name: true
    </rosparam>
  </node>


  <node name="fg_euclidean_clustering"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/EuclideanClustering $(arg manager)"
        output="screen"
        respawn="true"
        clear_params="true">
    <remap from="~input" to="$(arg input_cloud)"/>
    <remap from="~input/cluster_indices" to="object_detection/output/cluster_indices"/>
    <rosparam>
      multi: true
      tolerance: 0.03
      min_size: 10
      downsample_enable: true
      approximate_sync: true
      queue_size: 100
      cluster_filter: 1
      use_cluster_indices_header: true
    </rosparam>
  </node>

  <node name="fg_cluster_point_indices_decomposer"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)"
        output="screen"
        respawn="true"
        clear_params="true">
    <remap from="~input" to="$(arg input_cloud)"/>
    <remap from="~target" to="fg_euclidean_clustering/output"/>
    <remap from="~boxes" to="object_detection/output/boxes"/>
    <remap from="~centroid_pose_array" to="object_detection/output/centroid"/>
    <rosparam>
      align_boxes: false
      align_boxes_with_plane: false
      force_to_flip_z_axis: false
      use_pca: true
      approximate_sync: true
      queue_size: 100
      use_cluster_indices_header: true
    </rosparam>
  </node>


  <group if="$(arg gui)">
    <node name="image_view0"
          pkg="image_view" type="image_view" >
      <remap from="image" to="/tile_image_2x1/output" />
    </node>
  </group>

</launch>
